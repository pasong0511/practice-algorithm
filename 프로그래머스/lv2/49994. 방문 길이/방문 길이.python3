def solution(dirs):
    visit = set()
    x = 0; y = 0
    for d in dirs:
        if d == 'U' and y < 5:
            visit.add(((x, y), (x, y+1)))
            y += 1
            
        elif d == 'D' and y > -5:
            visit.add(((x, y-1), (x, y)))
            y -= 1
            
        elif d == 'R' and x < 5:
            visit.add(((x, y), (x+1, y)))
            x += 1
            
        elif d == 'L' and x > -5:
            visit.add(((x-1, y), (x, y)))
            x -= 1
    return len(visit)

# def solution(dirs):
#     answer = 0
#     n = 11
#     map_data = [[0] * n for _ in range(n)]
#     start_x = (n // 2)
#     start_y = (n // 2)
#     next_x = start_x
#     next_y = start_y
    
#     count = 0
#     stack = []
    
#     for d in dirs :
#         #4방향 이동
#         if d == 'U' :
#             next_x = start_x - 1

#         if d == "D" :
#             next_x = start_x + 1

#         if d == "R" :
#             next_y = start_y + 1

#         if d == "L" :
#             next_y = start_y - 1
        
#         #좌표에서 벗어나면 그 자리에 있음
#         if next_x <= 0:          #x가 0보다 작으면 x = 0
#             next_x = 0
            
#         if start_y <= 0:         #y가 0보다 작으면 y = 0
#             next_y = 0
        
#         if n <= next_x :         #x가 n보다 크면 x = n-1
#             next_x = n-1
        
#         if n <= next_y :         #y가 n보다 크면 y = n-1
#             next_y = n-1
        
#         if [[start_x, start_y], [next_x, next_y]] not in stack :
#             if [[next_x, next_y], [start_x, start_y]] not in stack :
#                 if [start_x, start_y] != [next_x, next_y] :
#                     stack.append([[start_x, start_y], [next_x, next_y]])
#         #next가 다음의 start가 된다
#         start_x = next_x
#         start_y = next_y         
#     return (len(stack))