from collections import deque

def BFS(place) :
    start = []
    dx = [-1, 0, 1, 0]
    dy = [0, 1, 0, -1]
    
    for i in range(5) :
        for j in range(5) :
            if place[i][j] == "P" :
                start.append([i, j])
                
    for s in start :
        dq = deque([s])  # 큐에 초기값

        visited_list = [[False] * 5 for _ in range(5)]
        distance = [[0] * 5 for _ in range(5)]
        visited_list[s[0]][s[1]] = True
        
        while dq :
            x, y = dq.popleft()
    
            for d in range(4) :
                next_x = x + dx[d]
                next_y = y + dy[d]
                
                if 0 <= next_x < 5 and 0 <= next_y < 5 and visited_list[next_x][next_y] is False :
                    
                    if place[next_x][next_y] == 'O' :
                        dq.append((next_x, next_y))
                        visited_list[next_x][next_y] = True
                        distance[next_x][next_y] = distance[x][y] + 1
                    
                    if place[next_x][next_y] == 'P' and distance[x][y] <= 1:
                        return 0
    return 1
                    
                    
    
def solution(places) :
    answer = []
    
    for place in places : 
        answer.append(BFS(place))
        
    return answer
    